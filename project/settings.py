"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from django.contrib.messages import DEBUG, INFO, SUCCESS, WARNING, ERROR

from pathlib import Path
from os import environ, path
from dj_database_url import parse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = environ.get('SECRET_KEY')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = str(environ.get('DEBUG')).lower() == 'true'

ALLOWED_HOSTS = [environ.get('ALLOWED_HOSTS')]
# Application definition

INSTALLED_APPS = [
    'channels',
    'decorators.apps.DecoratorsConfig',
    'registration.apps.RegistrationConfig',
    'exceptions.apps.ExceptionsConfig',
    'categories.apps.CategoriesConfig',
    'pages.apps.PagesConfig',
    'htmx_messages.apps.HtmxMessagesConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_htmx',
    'dashboard',
    'accounts.apps.AccountsConfig',
    'products.apps.ProductsConfig',
    'inventories.apps.InventoriesConfig',
    'orders.apps.OrdersConfig',
    'searches.apps.SearchesConfig',
    'moderation',
    'administration',
]

# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": [('127.0.0.1', 6379)],
#         },
#     },
# }


CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    },
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_htmx.middleware.HtmxMiddleware',
    # 'htmx_messages.middleware.HtmxMessagesMiddleware',
    # 'accounts.middleware.MiddlewarePermissions',
    # 'inventories.middleware.MiddlewarePermissions',
    # 'orders.middleware.MiddlewarePermissions',
    # 'moderation.middleware.MiddlewarePermissions',
    # 'dashboard.middleware.MiddlewarePermissions',
    # 'administration.middleware.MiddlewarePermissions',
]



ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'project.wsgi.application'
ASGI_APPLICATION = 'project.asgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# DATABASES['default'] = parse(environ.get('DATABASE_URL'))



# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    path.join(
        BASE_DIR, 'project/static'
    )
]
STATIC_ROOT = path.join(BASE_DIR, 'staticfiles-cdn')

# media files (Images)

MEDIA_ROOT = path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Message Level, Message Tag

MESSAGE_LEVEL = DEBUG

MESSAGE_TAGS = {
    DEBUG: 'bg-light',
    INFO: 'info-toast',
    SUCCESS: 'success-toast',
    WARNING: 'warning-toast',
    ERROR: 'error-toast',
}


AUTH_USER_MODEL = 'registration.CustomUser'

# Groups Levels, Choices

BANNED_GROUP = 'banned'
CLIENT_GROUP = 'client'
MOD_GROUP = 'moderator'
MANAGER_GROUP = 'manager'
ADMIN_GROUP = 'admin'
USER_GROUPS_CHOICES = [
    (BANNED_GROUP, 'Banned'),
    (CLIENT_GROUP, 'Client'),
    (MOD_GROUP, 'Moderator'),
    (MANAGER_GROUP, 'Manager'),
    (ADMIN_GROUP, 'Admin'),
]

# User Status, Choices

ACTIVE_USER = 'active'
BANNED_USER = 'banned'
DELETED_USER = 'deleted'
USER_STATUS_CHOICES = [
    (ACTIVE_USER, 'Active'),
    (BANNED_USER, 'Banned'),
    (DELETED_USER, 'Deleted'),
]

# User Roles, Choices

DEFAULT_ROLE = 'default'
MOD_ROLE = 'moderator'
MANAGER_ROLE = 'manager'
ADMIN_ROLE = 'admin'
USER_ROLES_CHOICES = [
    (DEFAULT_ROLE, 'Default'),
    (MOD_ROLE, 'Moderator'),
    (MANAGER_ROLE, 'Manager'),
    (ADMIN_ROLE, 'Admin'),
]